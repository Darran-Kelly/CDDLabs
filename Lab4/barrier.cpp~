#include "Semaphore.h"
#include <iostream>
#include <thread>



int c=0; // keep a count of the threads
int n=3; // declare number of threads

void lunchBreak(std::shared_ptr<Semaphore> mutex, std::shared_ptr<Semaphore> barries){
  mutex->Wait();
  c++;
  std::cout<<"Bob is gone to lunch" << " " << c << std::endl;
  mutex->Signal();
  if(c==n){
    barries->Signal();
  }
  barries->Wait();
  barries->Signal();
}

int main(){
  std::shared_ptr<Semaphore> mutex( new Semaphore(1));
  std::shared_ptr<Semaphore> barries( new Semaphore());
  std::thread bob1(lunchBreak, mutex,barries);
  std::thread bob2(lunchBreak, mutex,barries);
  std::thread bob3(lunchBreak, mutex,barries);
  /**< Launch the threads  */
  bob1.join();
  bob2.join();
  bob3.join();
  return 0;
}
